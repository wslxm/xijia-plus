package io.github.wslxm.springbootplus2.core.result;import io.github.wslxm.springbootplus2.core.utils.EnumUtil;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;import lombok.Data;import java.io.Serializable;/** * 返回的数据格式 * * @author 王松 * @WX-QQ 1720696548 * @date 2019/11/14 14:55 */@Data@ApiModel(value = "R", description = "统一返回格式")public class R<T> implements Serializable {    private static final long serialVersionUID = -5666504070515657048L;    @ApiModelProperty(value = "状态码")    private Integer code;    @ApiModelProperty(value = "状态描叙")    private String msg;    /**     * 注解 @JsonInclude(value = JsonInclude.Include.NON_EMPTY) 设置空不返回     */    @ApiModelProperty(value = "返回数据")    private T data;    @ApiModelProperty(value = "错误的栈内存信息")    private String errorMsg;    /**     * 枚举方式     *     * @param rType    rType     * @param data     data     * @param errorMsg errorMsg     * @author ws     * @email 1720696548@qq.com     * @date 2020/4/19 0019 14:55     */    public R(RType rType, T data, String errorMsg) {        this.code = rType.getValue();        this.msg = rType.getMsg();        this.data = data;        this.errorMsg = errorMsg;    }    /**     * code，msg方式     *     * @param code     code     * @param msg      msg     * @param data     data     * @param errorMsg errorMsg     * @author ws     * @email 1720696548@qq.com     * @date 2020/4/19 0019 14:55     */    public R(Integer code, String msg, T data, String errorMsg) {        this.code = code;        this.data = data;        this.msg = msg;        this.errorMsg = errorMsg;    }    public static R<Void> success() {        return success(null);    }    public static <T> R<T> success(T data) {        return new R(RType.SYS_SUCCESS, data, null);    }    public static R<Void> successFind() {        return successFind(null);    }    public static <T> R<T> successFind(T data) {        return new R(RType.SYS_SUCCESS_FIND, data, null);    }    public static R<Void> successInsert() {        return successInsert(null);    }    public static <T> R<T> successInsert(T data) {        return new R(RType.SYS_SUCCESS_INSERT, data, null);    }    public static R<Void> successUpdate() {        return successUpdate(null);    }    public static <T> R<T> successUpdate(T data) {        return new R(RType.SYS_SUCCESS_UPDATE, data, null);    }    public static R<Void> successDelete() {        return successDelete(null);    }    public static <T> R<T> successDelete(T data) {        return new R(RType.SYS_SUCCESS_DELETE, data, null);    }    public static <T> R<T> error(RType rType) {        return error(rType.getValue(), rType.getMsg(), null, null);    }    public static <T> R<T> error(RType rType, String errorMsg) {        return error(rType.getValue(), rType.getMsg(), null, errorMsg);    }    public static <T> R<T> error(RType rType, T data, String errorMsg) {        return error(rType.getValue(), rType.getMsg(), data, errorMsg);    }    public static <T> R<T> error(Integer code, String msg) {        return new R(code, msg, null, null);    }    public static <T> R<T> error(Integer code, String msg, String errorMsg) {        return new R(code, msg, null, errorMsg);    }    public static <T> R<T> error(Integer code, String msg, T data, String errorMsg) {        return new R(code, msg, data, errorMsg);    }    public static <T, E> R<T> error(E e) {        return error(EnumUtil.getValue(e), EnumUtil.getMsg(e), null, null);    }    public static <T, E> R<T> error(E e, String errorMsg) {        return error(EnumUtil.getValue(e), EnumUtil.getMsg(e), null, errorMsg);    }    public static <T, E> R<T> error(E e, T data, String errorMsg) {        return error(EnumUtil.getValue(e), EnumUtil.getMsg(e), data, errorMsg);    }}