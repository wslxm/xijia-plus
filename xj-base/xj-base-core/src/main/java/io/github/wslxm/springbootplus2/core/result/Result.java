package io.github.wslxm.springbootplus2.core.result;import com.fasterxml.jackson.annotation.JsonInclude;import io.github.wslxm.springbootplus2.core.utils.EnumUtil;import lombok.Data;import java.io.Serializable;/** * 统一返回对象 数据格式 * * @author 王松 * @WX-QQ 1720696548 * @date 2019/11/14 14:55 */@Datapublic class Result<T> implements Serializable {    private static final long serialVersionUID = -5666504070515657048L;    /**     * 状态码     */    private Integer code;    /**     * 状态描叙     */    private String msg;    /**     * 返回数据     */    private T data;    /**     * 错误的栈内存信息  注解:空不返回     */    @JsonInclude(value = JsonInclude.Include.NON_EMPTY)    private String errorMsg;    /**     * 枚举方式     *     * @param rType    rType     * @param data     data     * @param errorMsg errorMsg     * @author ws     * @email 1720696548@qq.com     * @date 2020/4/19 0019 14:55     */    public Result(ResultType rType, T data, String errorMsg) {        this.code = rType.getValue();        this.msg = rType.getMsg();        this.data = data;        this.errorMsg = errorMsg;    }    /**     * code，msg方式     *     * @param code     code     * @param msg      msg     * @param data     data     * @param errorMsg errorMsg     * @author ws     * @email 1720696548@qq.com     * @date 2020/4/19 0019 14:55     */    public Result(Integer code, String msg, T data, String errorMsg) {        this.code = code;        this.data = data;        this.msg = msg;        this.errorMsg = errorMsg;    }    public static Result<Void> success() {        return success(null);    }    public static <T> Result<T> success(T data) {        return new Result(ResultType.SYS_SUCCESS, data, null);    }    public static Result<Void> successFind() {        return successFind(null);    }    public static <T> Result<T> successFind(T data) {        return new Result(ResultType.SYS_SUCCESS_FIND, data, null);    }    public static Result<Void> successInsert() {        return successInsert(null);    }    public static <T> Result<T> successInsert(T data) {        return new Result(ResultType.SYS_SUCCESS_INSERT, data, null);    }    public static Result<Void> successUpdate() {        return successUpdate(null);    }    public static <T> Result<T> successUpdate(T data) {        return new Result(ResultType.SYS_SUCCESS_UPDATE, data, null);    }    public static Result<Void> successDelete() {        return successDelete(null);    }    public static <T> Result<T> successDelete(T data) {        return new Result(ResultType.SYS_SUCCESS_DELETE, data, null);    }    public static <T> Result<T> error(ResultType rType) {        return error(rType.getValue(), rType.getMsg(), null, null);    }    public static <T> Result<T> error(ResultType rType, String errorMsg) {        return error(rType.getValue(), rType.getMsg(), null, errorMsg);    }    public static <T> Result<T> error(ResultType rType, T data, String errorMsg) {        return error(rType.getValue(), rType.getMsg(), data, errorMsg);    }    public static <T> Result<T> error(Integer code, String msg) {        return new Result(code, msg, null, null);    }    public static <T> Result<T> error(Integer code, String msg, String errorMsg) {        return new Result(code, msg, null, errorMsg);    }    public static <T> Result<T> error(Integer code, String msg, T data, String errorMsg) {        return new Result(code, msg, data, errorMsg);    }//    public static <T, E> Result<T> error(E e) {//        return error(EnumUtil.getValue(e), EnumUtil.getMsg(e), null, null);//    }////    public static <T, E> Result<T> error(E e, String errorMsg) {//        return error(EnumUtil.getValue(e), EnumUtil.getMsg(e), null, errorMsg);//    }////    public static <T, E> Result<T> error(E e, T data, String errorMsg) {//        return error(EnumUtil.getValue(e), EnumUtil.getMsg(e), data, errorMsg);//    }}