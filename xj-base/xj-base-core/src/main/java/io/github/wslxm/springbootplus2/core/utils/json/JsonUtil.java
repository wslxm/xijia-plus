package io.github.wslxm.springbootplus2.core.utils.json;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.alibaba.fastjson.serializer.SerializerFeature;import lombok.Data;import lombok.extern.slf4j.Slf4j;import java.util.ArrayList;import java.util.List;import java.util.Map;/** *   fastjson-JSON 工具类扩展 * <p> * //   fastjson - 原API 一览 * // public static final Object parse(String text);                                // 把JSON文本parse为JSONObject或者JSONArray * // public static final JSONObject parseObject(String text)；                     // 把JSON文本parse成JSONObject * // public static final <T> T parseObject(String text, Class<T> clazz);           // 把JSON文本parse为JavaBean * // public static final JSONArray parseArray(String text);                        // 把JSON文本parse成JSONArray * // public static final <T> List<T> parseArray(String text, Class<T> clazz);      // 把JSON文本parse成JavaBean集合 * // public static final String toJSONString(Object object);                       // 将JavaBean 序列化为JSON文本 * // public static final String toJSONString(Object object, boolean prettyFormat); // 将JavaBean 序列化为带格式的JSON文本 * // public static final Object toJSON(Object javaObject);                         // 将JavaBean转换为JSONObject或者JSONArray。 * * @author ws * @mail 1720696548@qq.com * @date 2020/4/24 0024 9:55 */@SuppressWarnings("ALL")@Slf4jpublic class JsonUtil {    //===================================================================================================    //===================================================================================================    //======================================= 转 Json字符串 ==============================================    //===================================================================================================    //===================================================================================================    /**     *  将任意对象转为json字符串, 并忽略值为 null的属性（默认）     */    public static String toJSONString(Object object) {        return JSON.toJSONString(object);    }    /**     *  将任意对象转为json字符串, 并忽略值为null的属性, 同 toJSONString方法     */    public static String toJSONStringNoNull(Object object) {        return JSON.toJSONString(object, SerializerFeature.PrettyFormat);    }    /**     *  将任意对象转为json字符串转为json字符串, 并保留值为null的属性     */    public static String toJSONStringIsNull(Object object) {        return JSON.toJSONString(object, SerializerFeature.PrettyFormat, SerializerFeature.WriteMapNullValue);    }    //===================================================================================================    //===================================================================================================    //========================================== 转 Object ==============================================    //===================================================================================================    //===================================================================================================    /**     *  把 JSON字符串转为 Object （接收时可强转任意javaBand）     */    public static Object parse(String text) {        return JSON.parse(text);    }    /**     *  将JavaBean(任意对象) 转换为 Object, （接收时可强转任意javaBand）     */    public static Object toJSON(Object javaObject) {        return JSON.toJSON(javaObject);    }    //===================================================================================================    //===================================================================================================    //=========================================  转 JSONObject ==========================================    //==================================   JSONObject的数据是用 {  } 来表示的）  == ========================    //===================================================================================================    /**     *  把JSON字符串 转为 JSONObject     */    public static JSONObject parseObject(String text) {        return JSON.parseObject(text);    }    //===================================================================================================    //===================================================================================================    //========================================== 转 JSONArray ===========================================    //================== JSONArray，顾名思义是由JSONObject构成的数组，用  [ { } , { } , ......  , { } ]  ====    //===================================================================================================    /**     *  把JSON字符串 转为 JSONArray  ( 来表示的）     */    public static JSONArray parseArray(String text) {        return JSON.parseArray(text);    }    //===================================================================================================    //===================================================================================================    //=========================================== 转 javaBean ===========================================    //===================================================================================================    //===================================================================================================    /**     *  把JSON字符串转为JavaBean     */    public static <T> T parseObject(String text, Class<T> clazz) {        return JSON.parseObject(text, clazz);    }    //===================================================================================================    //===================================================================================================    //============================================= 转实体类 ==============================================    //===================================================================================================    //===================================================================================================    /**     *  把JSON 字符串转为实体类     */    public static <T> T parseEntity(String text, Class<T> clazz) {        return JSON.parseObject(text, clazz);    }    /**     *  将Map 转换为 实体类     */    public static <T> T parseEntity(Map map, Class<T> t) {        String jsons = toJSONStringIsNull(map);        T t1 = JSON.parseObject(jsons, t);        return t1;    }    //===================================================================================================    //===================================================================================================    //============================================= 转Map ==============================================    //===================================================================================================    //===================================================================================================    /**     *  把JSON字符串转为 Map     */    public static Map parseMap(String text) {        return JSON.parseObject(text, Map.class);    }    /**     *  将实体类 转换为  Map     */    public static <T> Map parseMap(T t) {        String jsons = toJSONStringIsNull(t);        Map paramMap = (Map) JSONObject.parseObject(jsons);        return paramMap;    }    //===================================================================================================    //===================================================================================================    //============================================= 转List ==============================================    //===================================================================================================    //===================================================================================================    /**     *  把JSON字符串转为 List     *     * @return     */    public static List parseList(String text) {        return JSON.parseObject(text, List.class);    }    /**     *  把JSON 字符串转为 List<JavaBean>  ==>  List<任意对象>     */    public static <T> List<T> parseList(String text, Class<T> clazz) {        return JSON.parseArray(text, clazz);    }    /**     * 判断字符串数据是否为json     * @param content     * @return     */    public static boolean isJson(String content) {        try {            JSON.parseObject(content);            return true;        } catch (Exception e) {            return false;        }    }    /**     *   测试     *     * @param args     * @return void     * @author ws     * @mail 1720696548@qq.com     * @date 2020/4/24 0024 10:23     */    public static void main(String[] args) {        //  测试是否包含null的值//        User user = new User();//        user.setId(1L);//        user.setUsername("张三");//        user.setPassword("");//        user.setMobile(null);//        log.info("toJSONString-不包含null==" + toJSONString(user));//        log.info("toJSONString-包含null==" + toJSONStringIsNull(user));//        log.info("toJSONString-不包含null==" + toJSONStringNoNull(user));        //  测试Map 与实体类的相互转换//        User user = new User();//        user.setId(1L);//        user.setUsername("张三");//        user.setPassword("");//        user.setMobile(null);//        Map map = parseMap(user);//        User user2 = parseEntity(map, User.class);//        log.info();        // 测试json字符串 转 List<Entity>        User user = new User();        List<User> users = new ArrayList<>();        for (int i = 0; i < 10; i++) {            user.setId(i);            user.setUsername("张三");            user.setPassword("");            user.setMobile(null);            users.add(user);        }        String jsons = toJSONStringIsNull(users);        List list = parseList(jsons);        List<User> users2 = parseList(jsons, User.class);        log.info(users2.toString());    }    @Data    static class User {        private long id;        private String username;        private String password;        private String mobile;    }}